"       (_)               | |  (_)    | |
" __   ___ _ __ ___ ______| | ___  ___| | _____ ______ __ _ ___ ___
" \ \ / / | '_ ` _ \______| |/ / |/ __| |/ / __|______/ _` / __/ __|
"  \ V /| | | | | | |     |   <| | (__|   <\__ \     | (_| \__ \__ \
"   \_/ |_|_| |_| |_|     |_|\_\_|\___|_|\_\___/      \__,_|___/___/
"
"          .vimrc used by jgmdev (github.com/jgmdev)
"
"          -- based on template/vimrc
"          -- based on template/vimrc.kibs

" make sure we are in full Vim mode
set nocompatible

" enable filetype specific plugins
filetype on
filetype plugin on
filetype indent off " disable annoying auto indentation

" for configuration
let vim_path=expand('<sfile>:p:h')."/.vim"
let $VIMHOME=vim_path

" -------------------------------------------------------
" CHECK REQUIRED DEPENDENCIES
" -------------------------------------------------------
if !executable("git")
  echo "Remember to install git."
endif

if !executable("ctags") && !executable("phpctags")
  echo "Remember to install phpctags or ctags for autocomplete support."
endif

if !executable("fzf") || !executable("rg")
  echo "Remember to install fzf and ripgrep for file searching."
endif

if !executable("php-cs-fixer")
  echo "Remember to install php-cs-fixer."
endif

" -------------------------------------------------------
" LOAD PLUGINS
" -------------------------------------------------------
call vim_kicks_ass#with_plugins([
  \ 'misc', 'easytags', 'taglist',
  \ 'l9', 'syntastic',
  \ 'fugitive', 'autoclose', 'markdown',
  \ 'html5', 'nerdcommenter', 'tabular',
  \ 'closetag', 'detectindent', 'junegunn/fzf.vim',
  \ 'itchyny/lightline.vim', 'scrooloose/nerdtree',
  \ 'sheerun/vim-polyglot', 'jcommenter', 'endwise',
  \ 'ap/vim-css-color', 'prabirshrestha/async.vim', 'prabirshrestha/vim-lsp',
  \ 'php-doc', 'php-fix-html-indent', 'php-cs-fixer', 'php-namespace',
  \ 'mikoto2000/buffer_selector.vim', 'thaerkh/vim-workspace',
  \ 'qpkorr/vim-bufkill'
  \ ])

call vim_kicks_ass#with_plugins([
  \ 'prabirshrestha/asyncomplete.vim',
  \ 'prabirshrestha/asyncomplete-lsp.vim',
  \ ])

" -------------------------------------------------------
" LOAD PRESETS
" -------------------------------------------------------
call vim_kicks_ass#using_presets([
  \ 'javascript'
  \ ])

" -------------------------------------------------------
" Autocompletion backends for asynccomplete
" -------------------------------------------------------

" Keyword completion
call vim_kicks_ass#with_plugins([
  \ 'prabirshrestha/asyncomplete-buffer.vim',
  \ ])

call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
  \ 'name': 'buffer',
  \ 'whitelist': ['*'],
  \ 'blacklist': ['go'],
  \ 'completor': function('asyncomplete#sources#buffer#completor'),
  \ 'config': {
  \    'max_buffer_size': -1,
  \  },
  \ }))

" File name completion
call vim_kicks_ass#with_plugins([
  \ 'prabirshrestha/asyncomplete-file.vim'
  \ ])

au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
  \ 'name': 'file',
  \ 'whitelist': ['*'],
  \ 'priority': 10,
  \ 'completor': function('asyncomplete#sources#file#completor')
  \ }))

" Omni completion
call vim_kicks_ass#with_plugins([
  \ 'yami-beta/asyncomplete-omni.vim'
  \ ])

call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
  \ 'name': 'omni',
  \ 'whitelist': ['*'],
  \ 'blacklist': ['c', 'cpp', 'html', 'php', 'css', 'less', 'sass'],
  \ 'completor': function('asyncomplete#sources#omni#completor')
  \  }))

" -------------------------------------------------------
" PLUGIN SETTINGS
" -------------------------------------------------------

" vim-workspace
let g:workspace_session_directory = vim_path.'/sessions/'

" asynccomplete
let g:asyncomplete_auto_popup = 1

" vim-lsp
let g:lsp_signs_enabled = 0
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_insert_text_enabled = 0
let g:lsp_preview_autoclose = 0

" Enable intelephense for vim-lsp or newer php-complete
" npm install -g intelephense
if executable("intelephense")
  if !isdirectory(vim_path."/intelephense")
    call mkdir(vim_path."/intelephense", "p")
  endif
  au User lsp_setup call lsp#register_server({
    \ 'name': 'intelephense',
    \ 'cmd': {server_info->['intelephense', '--stdio']},
    \ 'initialization_options': {"storagePath": expand("~/.vim/intelephense")},
    \ 'whitelist': ['php'],
    \ })
  "autocmd FileType php setlocal omnifunc=lsp#complete
" Enable php-language-server for vim-lsp
" git clone https://github.com/felixfbecker/php-language-server ~/.vim/php-language-server
" cd ~/.vim/php-language-server/ && composer install && composer run-script parse-stubs
elseif isdirectory(vim_path."/php-language-server")
  au User lsp_setup call lsp#register_server({
    \ 'name': 'php-language-server',
    \ 'cmd': {server_info->['php', expand("~/.vim/php-language-server/bin/php-language-server.php")]},
    \ 'whitelist': ['php'],
    \ })
  "autocmd FileType php setlocal omnifunc=lsp#complete
else
  " php-complete : autocompletion support
  " enable php-complete for newer code completion code base
  call vim_kicks_ass#with_plugins('php-complete')
  let g:phpcomplete_parse_docblock_comments = 1
endif

" npm install -g vscode-css-languageserver-bin
if executable('css-languageserver')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'css-languageserver',
    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'css-languageserver --stdio']},
    \ 'whitelist': ['css', 'less', 'sass'],
    \ })
  "autocmd FileType css setlocal omnifunc=lsp#complete
  "autocmd FileType less setlocal omnifunc=lsp#complete
  "autocmd FileType sass setlocal omnifunc=lsp#complete
endif

" autocomplpop options
let g:acp_mappingDriven = 1 " don't autocomplete on backspace
let g:acp_behaviorKeywordLength = 2 " keyword autocomplete with 1 character
let g:acp_completeoptPreview = 1 " display function arguments preview

" easytags option
let g:easytags_cmd = 'ctags'
let g:easytags_syntax_keyword = 'auto' " Use auto or always (faster)
let g:easytags_auto_update = 0 " automatically generate tags while coding
let g:easytags_auto_highlight = 0 " can affect performance
let g:easytags_async = 1
if !isdirectory(vim_path."/typetags")
  call mkdir(vim_path."/typetags", "p")
endif
set tags=./tags; " project tags file
let g:easytags_dynamic_files = 1 " use project tags file if available
let g:easytags_file = vim_path."/tags"
let g:easytags_by_filetype = vim_path."/typetags" " generate tag files by file type
" enable tag recursion if inside a repository
let git_repo = isdirectory(getcwd().'/'.".git")
let fossil_repo = file_readable(getcwd().'/'.".fslckout")
if git_repo || fossil_repo
  let g:easytags_autorecurse = 1
  "echo 'Recursive tags scanning enabled.'
endif

" syntastic options
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1

" detectindent options
let g:detectindent_preferred_expandtab = 1
let g:detectindent_preferred_indent = 4
let g:detectindent_preferred_when_mixed = 1

" lightline options
let g:lightline = {
  \ 'active': {
  \   'left': [
  \     ['mode', 'paste'],
  \     ['readonly', 'filename', 'modified'],
  \     ['syntastic', 'gitbranch']
  \   ],
  \   'right': [
  \     ['lineinfo'],
  \     ['percent'],
  \     ['fileformat', 'fileencoding', 'filetype']
  \   ]
  \ },
  \ 'component_function': {
  \   'gitbranch': "fugitive#statusline",
  \   'syntastic': "SyntasticStatuslineFlag"
  \ }
  \ }

" fix: some weird issues with arrowkeys using autoclose in console
if !has("gui_running")
  let g:AutoClosePreservDotReg = 0
endif

" -------------------------------------------------------
" LOAD COLORSCHEMES
" -------------------------------------------------------
call vim_kicks_ass#using_colorschemes([
  \ "jellybeans", "molokai", "joshdick/onedark.vim",
  \ ])

" -------------------------------------------------------
" EDITOR OPTIONS
" -------------------------------------------------------

" create the swap files directory
if !isdirectory(vim_path."/swap")
  call mkdir(vim_path."/swap", "p")
endif

syntax on
colorscheme onedark
set t_Co=256 " enable more colors for schemes that require them.
set ff=unix
set nowrap
set directory=$VIMHOME/swap//
"set backspace=indent,eol,start
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set copyindent
set shiftround
set smartindent
set smarttab
set undolevels=100000
set number             " linenumbering
set laststatus=2       " always show statusline
set hlsearch
set cursorline
set relativenumber
set colorcolumn=81     " right margin position
set mouse=a            " enable mouse
set completeopt=menuone,longest,preview,noselect,noinsert
set visualbell         " disable annoying error sound
set t_vb=

" -------------------------------------------------------
" KEY BINDINGS
" -------------------------------------------------------
let mapleader = '\'
let maplocalleader = ','

" Workspace session (create or delete a session for current directory)
nnoremap <leader>s :ToggleWorkspace<CR>
" Document traversing
nnoremap <C-b> :call buffer_selector#OpenBufferSelector()<CR>
inoremap <C-b> <C-O>:call buffer_selector#OpenBufferSelector()<CR>
" show list of symbols
nnoremap <LocalLeader>l :TlistToggle<CR>
" goto definition
nnoremap <C-]> :LspDefinition<CR>
inoremap <C-]> <C-O>:LspDefinition<CR>
nnoremap <LocalLeader>jh <C-W><C-]>
nnoremap <C-LeftMouse> <C-]>
nnoremap <C-RightMouse> <C-W><C-]>
" comment/uncomment
nnoremap <LocalLeader>c :call NERDComment(0, "toggle")<CR>
vnoremap <LocalLeader>c :call NERDComment(1, "toggle")<CR>
inoremap <C-c> <C-O>:call NERDComment(0, "toggle")<CR>
" generate php doc block
nnoremap <LocalLeader>d :call JCommentWriter()<CR>
nnoremap <LocalLeader>D :call PhpDoc()<CR>
nnoremap <LocalLeader>e :Explore<CR>
" tabs navigation previous/next
nnoremap <LocalLeader>[ :tabp<CR>
nnoremap <LocalLeader>] :tabn<CR>
" open files
nnoremap <LocalLeader>o :edit<Space>
nnoremap <LocalLeader>O :tabnew<Space>
nnoremap <LocalLeader>v :vsplit<Space>
nnoremap <LocalLeader>V :split<Space>
" save/quit
nnoremap <LocalLeader>s :w<CR>
nnoremap <LocalLeader>sq :wq<CR>
nnoremap <LocalLeader>q :q<CR>
nnoremap <LocalLeader>Q :qa<CR>
nnoremap <LocalLeader>x :BD<CR>
nnoremap <LocalLeader>X :tabclose<CR>
" shift tab unindent
nnoremap <Tab> >>
nnoremap <S-Tab> <<
inoremap <S-Tab> <C-d>
" bind omnicomplete to CTRL+Space (doesn't works in terminal but does on gvim)
inoremap <expr> <C-Space> pumvisible() \|\| &omnifunc == '' ?
  \ "\<lt>C-n>" :
  \ "\<lt>C-x>\<lt>C-o><c-r>=pumvisible() ?" .
  \ "\"\\<lt>c-n>\\<lt>c-p>\\<lt>c-n>\" :" .
  \ "\" \\<lt>bs>\\<lt>C-n>\"\<CR>"
inoremap <C-@> <C-Space>
" Show function signature
nnoremap <C-S-p> :LspHover<CR>
inoremap <C-S-p> <C-O>:LspHover<CR>
nnoremap <C-S-d> :LspPeekDefinition<CR>
inoremap <C-S-d> <C-O>:LspPeekDefinition<CR>
" search files/content
nnoremap <LocalLeader>f :Files<CR>
nnoremap <LocalLeader>F :Rg<Space>
" toggle search highlight
nnoremap <LocalLeader>h :set hlsearch!<cr>
" display directory tree (use o to collapse/uncollapse)
nnoremap <LocalLeader>t :NERDTreeToggle<CR>
" php bindings
nnoremap <Leader>f :call PhpCsFixerFixFile()<CR>

" -------------------------------------------------------
" AUTO COMMANDS
" -------------------------------------------------------
autocmd BufWritePre * :%s/\s\+$//e " strip trailing spaces
autocmd BufWritePre * :retab " convert tabs to spaces
autocmd BufReadPost * :DetectIndent
